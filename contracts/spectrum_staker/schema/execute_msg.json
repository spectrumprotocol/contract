{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bond"
      ],
      "properties": {
        "bond": {
          "type": "object",
          "required": [
            "assets",
            "contract",
            "slippage_tolerance"
          ],
          "properties": {
            "asset_token": {
              "type": [
                "string",
                "null"
              ]
            },
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              },
              "maxItems": 2,
              "minItems": 2
            },
            "compound_rate": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "contract": {
              "type": "string"
            },
            "slippage_tolerance": {
              "$ref": "#/definitions/Decimal"
            },
            "staker_addr": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bond_hook"
      ],
      "properties": {
        "bond_hook": {
          "type": "object",
          "required": [
            "asset_token",
            "contract",
            "prev_staking_token_amount",
            "staker_addr",
            "staking_token"
          ],
          "properties": {
            "asset_token": {
              "type": "string"
            },
            "compound_rate": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "contract": {
              "type": "string"
            },
            "prev_staking_token_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "staker_addr": {
              "type": "string"
            },
            "staking_token": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "zap_to_bond"
      ],
      "properties": {
        "zap_to_bond": {
          "type": "object",
          "required": [
            "contract",
            "max_spread",
            "pair_asset",
            "provide_asset"
          ],
          "properties": {
            "asset_token": {
              "type": [
                "string",
                "null"
              ]
            },
            "belief_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "belief_price_b": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "compound_rate": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "contract": {
              "type": "string"
            },
            "max_spread": {
              "$ref": "#/definitions/Decimal"
            },
            "pair_asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "pair_asset_b": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "provide_asset": {
              "$ref": "#/definitions/Asset"
            },
            "swap_hints": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/SwapOperation"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "allow_all": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "insert_allowlist": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            },
            "remove_allowlist": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "zap_to_unbond_hook"
      ],
      "properties": {
        "zap_to_unbond_hook": {
          "type": "object",
          "required": [
            "max_spread",
            "prev_asset_a",
            "prev_target_asset",
            "staker_addr"
          ],
          "properties": {
            "belief_price_a": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "belief_price_b": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_spread": {
              "$ref": "#/definitions/Decimal"
            },
            "prev_asset_a": {
              "$ref": "#/definitions/Asset"
            },
            "prev_asset_b": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Asset"
                },
                {
                  "type": "null"
                }
              ]
            },
            "prev_target_asset": {
              "$ref": "#/definitions/Asset"
            },
            "staker_addr": {
              "type": "string"
            },
            "swap_hints": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/SwapOperation"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      }
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "SwapOperation": {
      "type": "object",
      "required": [
        "asset_info",
        "pair_contract"
      ],
      "properties": {
        "asset_info": {
          "$ref": "#/definitions/AssetInfo"
        },
        "belief_price": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "pair_contract": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
